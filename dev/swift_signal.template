heat_template_version: 2013-05-23

description: |
  Test template demonstrating Swift signal handling resource capabilities 

parameters:

resources:

  random_key_name:
    type: OS::Heat::RandomString
    properties:
      length: 8

  access_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_resource: random_key_name }
      save_private_key: true

  instance1:
    type: OS::Nova::Server
    properties:
      image: CentOS 7 (PVHVM)
      flavor: 1 GB Performance
      key_name: { get_resource: access_key }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        heat-stack-name: { get_param: "OS::stack_name" }
      config_drive: True
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -x
            # Below are some examples of the various ways signals
            # can be sent to the Handle resource

            # Simple success signal
            wc_notify --data-binary '{"status": "SUCCESS"}'

            # Or you optionally can specify any of the additional fields
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal2"}'
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal3", "data": "data3"}'
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal4", "data": "data4"}'

            # If you require control of the ID, you can pass it.
            # The ID should be unique, unless you intend for duplicate
            # signals to overrite each other.  The following two calls
            # do the exact same thing, and will be treated as one signal
            # (You can prove this by changing count above to 7)
            wc_notify --data-binary '{"status": "SUCCESS", "id": "5"}'
            wc_notify --data-binary '{"status": "SUCCESS", "id": "5"}'

            # Example of sending a failure signal, optionally
            # reason, id, and data can be specified as above
            # wc_notify --data-binary '{"status": "FAILURE"}'

          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }

  wait_on_server:
    type: OS::Heat::SwiftSignal
    properties:
      handle: {get_resource: wait_handle}
      count: 5
      timeout: 600

  wait_handle:
    type: OS::Heat::SwiftSignalHandle

outputs:

  "Wait Condition data":
     value: { get_attr: [ wait_on_server, data ] }

  "Server ID":
    value: { get_resource: instance1 }
    description: Nova Server ID

  "Server IP":
    value: { get_attr: [ instance1, accessIPv4 ] }
    description: Nova Server IPv4 

  "SwiftSignal data":
    value: { get_attr: [ wait_on_server, data ] }
    description: JSON data that was uploaded via the SwiftSignalHandle 

  "SwiftSignalHandle curl":
    value: { get_attr: [ wait_handle, curl_cli ] }
    description: curl CLI command prefix, which can be used for signalling handle completion or failure 

  "SwiftSignalHandle endpoint":
    value: { get_attr: [ wait_handle, endpoint ] }
    description: Endpoint/url which can be used for signalling handle 
